definitions:
  apierrors.APIError:
    properties:
      message:
        type: string
    type: object
  dto.AuthorizationTokens:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  dto.Direction:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  dto.DirectionWithRating:
    properties:
      budget_places:
        type: integer
      id:
        type: integer
      name:
        type: string
      position:
        type: integer
      priority_one_upper:
        type: integer
      score:
        type: integer
    type: object
  dto.IDResponse:
    properties:
      id:
        type: integer
    type: object
  dto.IDs:
    properties:
      ids:
        items:
          type: integer
        type: array
    required:
    - ids
    type: object
  dto.SigningUp:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      middle_name:
        type: string
      password:
        type: string
      snils:
        type: string
      username:
        type: string
    required:
    - first_name
    - last_name
    - middle_name
    - password
    - snils
    - username
    type: object
  dto.UniversityDirections:
    properties:
      directions:
        items:
          $ref: '#/definitions/dto.Direction'
        type: array
      university_id:
        type: integer
      university_name:
        type: string
    type: object
  dto.UniversityDirectionsWithRating:
    properties:
      directions:
        items:
          $ref: '#/definitions/dto.DirectionWithRating'
        type: array
      university_id:
        type: integer
      university_name:
        type: string
    type: object
  dto.UserCredentials:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.UserProfile:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      middle_name:
        type: string
      snils:
        type: string
      username:
        type: string
    type: object
  dto.Username:
    properties:
      username:
        type: string
    type: object
  models.Direction:
    properties:
      id:
        type: integer
      name:
        type: string
      university_id:
        type: integer
      url:
        type: string
    type: object
  models.University:
    properties:
      directions_page_url:
        type: string
      full_name:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  rdto.University:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:8000/api
info:
  contact: {}
  description: Rating List Monitoring Platform API
  title: Rating List Monitoring Platform
  version: "1.0"
paths:
  /auth/logout:
    get:
      consumes:
      - application/json
      description: receives access token header and logouts user
      produces:
      - application/json
      responses:
        "200":
          description: logout success
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apierrors.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apierrors.APIError'
      security:
      - AccessTokenHeader: []
      summary: logout user
      tags:
      - authorization
  /auth/refresh-tokens:
    get:
      description: receives refresh token header and returns updated jwt access and refresh tokens
      parameters:
      - description: refresh token header
        in: header
        name: RefreshToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthorizationTokens'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apierrors.APIError'
      summary: update jwt access and refresh tokens
      tags:
      - authorization
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: receives user credentials and returns jwt access and refresh tokens
      parameters:
      - description: user credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.UserCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthorizationTokens'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apierrors.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apierrors.APIError'
      summary: signs in user with jwt tokens response
      tags:
      - authorization
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: receives user credentials, creates user and returns user id
      parameters:
      - description: user credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.SigningUp'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.IDResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apierrors.APIError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apierrors.APIError'
      summary: signs up new user
      tags:
      - authorization
  /direction/:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UniversityDirections'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apierrors.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apierrors.APIError'
      security:
      - AccessTokenHeader: []
      summary: returns all directions
      tags:
      - direction
  /direction/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: direction id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Direction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apierrors.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apierrors.APIError'
      security:
      - AccessTokenHeader: []
      summary: returns direction by id
      tags:
      - direction
  /direction/get_for_user:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UniversityDirections'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apierrors.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apierrors.APIError'
      security:
      - AccessTokenHeader: []
      summary: returns user directions
      tags:
      - direction
  /direction/get_for_user_with_rating:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UniversityDirectionsWithRating'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apierrors.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apierrors.APIError'
      security:
      - AccessTokenHeader: []
      summary: returns user directions with user rating
      tags:
      - direction
  /direction/set_for_user:
    post:
      consumes:
      - application/json
      description: receives direction ids and sets it to user
      parameters:
      - description: direction ids
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.IDs'
      produces:
      - application/json
      responses:
        "200":
          description: success
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apierrors.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apierrors.APIError'
      security:
      - AccessTokenHeader: []
      summary: set directions to user
      tags:
      - direction
  /university/:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/rdto.University'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apierrors.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apierrors.APIError'
      security:
      - AccessTokenHeader: []
      summary: returns all universities
      tags:
      - university
  /university/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: university id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.University'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apierrors.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apierrors.APIError'
      security:
      - AccessTokenHeader: []
      summary: returns university by id
      tags:
      - university
  /university/get_for_user:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/rdto.University'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apierrors.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apierrors.APIError'
      security:
      - AccessTokenHeader: []
      summary: returns user universities
      tags:
      - university
  /university/set_for_user:
    post:
      consumes:
      - application/json
      description: receives university ids and sets it to user
      parameters:
      - description: university ids
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.IDs'
      produces:
      - application/json
      responses:
        "200":
          description: success
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apierrors.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apierrors.APIError'
      security:
      - AccessTokenHeader: []
      summary: set universities to user
      tags:
      - university
  /user/get_profile:
    get:
      consumes:
      - application/json
      description: returns user username, firstname, lastname, middlename and snils
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserProfile'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apierrors.APIError'
      security:
      - AccessTokenHeader: []
      summary: returns user profile
      tags:
      - user
  /user/get_username:
    get:
      consumes:
      - application/json
      description: returns user username by passing auth access token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Username'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apierrors.APIError'
      security:
      - AccessTokenHeader: []
      summary: returns user username
      tags:
      - user
securityDefinitions:
  AccessTokenHeader:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
